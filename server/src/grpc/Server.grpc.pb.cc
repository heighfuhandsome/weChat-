// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Server.proto

#include "Server.pb.h"
#include "Server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace Server {

static const char* StatusServer_method_names[] = {
  "/Server.StatusServer/GetChartServer",
  "/Server.StatusServer/Login",
};

std::unique_ptr< StatusServer::Stub> StatusServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< StatusServer::Stub> stub(new StatusServer::Stub(channel, options));
  return stub;
}

StatusServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetChartServer_(StatusServer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(StatusServer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status StatusServer::Stub::GetChartServer(::grpc::ClientContext* context, const ::Server::UserInfo& request, ::Server::ChatServerInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Server::UserInfo, ::Server::ChatServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChartServer_, context, request, response);
}

void StatusServer::Stub::async::GetChartServer(::grpc::ClientContext* context, const ::Server::UserInfo* request, ::Server::ChatServerInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Server::UserInfo, ::Server::ChatServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChartServer_, context, request, response, std::move(f));
}

void StatusServer::Stub::async::GetChartServer(::grpc::ClientContext* context, const ::Server::UserInfo* request, ::Server::ChatServerInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChartServer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Server::ChatServerInfo>* StatusServer::Stub::PrepareAsyncGetChartServerRaw(::grpc::ClientContext* context, const ::Server::UserInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Server::ChatServerInfo, ::Server::UserInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChartServer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Server::ChatServerInfo>* StatusServer::Stub::AsyncGetChartServerRaw(::grpc::ClientContext* context, const ::Server::UserInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChartServerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status StatusServer::Stub::Login(::grpc::ClientContext* context, const ::Server::LoginReq& request, ::Server::LoginRsp* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Server::LoginReq, ::Server::LoginRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Login_, context, request, response);
}

void StatusServer::Stub::async::Login(::grpc::ClientContext* context, const ::Server::LoginReq* request, ::Server::LoginRsp* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Server::LoginReq, ::Server::LoginRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, std::move(f));
}

void StatusServer::Stub::async::Login(::grpc::ClientContext* context, const ::Server::LoginReq* request, ::Server::LoginRsp* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Login_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Server::LoginRsp>* StatusServer::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::Server::LoginReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Server::LoginRsp, ::Server::LoginReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Login_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Server::LoginRsp>* StatusServer::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::Server::LoginReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

StatusServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatusServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StatusServer::Service, ::Server::UserInfo, ::Server::ChatServerInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StatusServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Server::UserInfo* req,
             ::Server::ChatServerInfo* resp) {
               return service->GetChartServer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      StatusServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< StatusServer::Service, ::Server::LoginReq, ::Server::LoginRsp, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](StatusServer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Server::LoginReq* req,
             ::Server::LoginRsp* resp) {
               return service->Login(ctx, req, resp);
             }, this)));
}

StatusServer::Service::~Service() {
}

::grpc::Status StatusServer::Service::GetChartServer(::grpc::ServerContext* context, const ::Server::UserInfo* request, ::Server::ChatServerInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StatusServer::Service::Login(::grpc::ServerContext* context, const ::Server::LoginReq* request, ::Server::LoginRsp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Server

